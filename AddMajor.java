/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package finalproject;

import java.awt.*;
import java.awt.event.WindowEvent;
import java.sql.*;
import javax.xml.crypto.Data;
import net.proteanit.sql.DbUtils;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Lenovo
 */
public class AddMajor extends javax.swing.JFrame {

    Connection conn = null;
    ResultSet res = null;
    PreparedStatement prepStatement = null;
    Statement statement = null;
    
    /**
     * Creates new form AddMajor
     */
    public AddMajor() {
        initComponents();
        conn = FinalProject.ConnectDB();
        display();
    }
    
    
    
    private void connect() {
        try {
            statement = conn.createStatement(res.TYPE_SCROLL_SENSITIVE, res.CONCUR_UPDATABLE);
            res = statement.executeQuery("SELECT * FROM majors");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
            System.exit(0);
        }
    }
    
    private void display() {
        try {
            String sql = "SELECT * FROM majors";
            prepStatement = conn.prepareStatement(sql);
            res = prepStatement.executeQuery();
            tableMajors.setModel(DbUtils.resultSetToTableModel(res));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void clear() {
        textMajorID.setText(null);
        textAddMajor.setText(null);
    }
    
    public void close(){
        WindowEvent closeWindow = new WindowEvent (this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(closeWindow);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAddMajor = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        textAddMajor = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableMajors = new javax.swing.JTable();
        btnEditMajor = new javax.swing.JButton();
        btnExt = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        textMajorID = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnAddMajor.setText("Add");
        btnAddMajor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMajorActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Add Major");

        tableMajors = new javax.swing.JTable() {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tableMajors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMajorsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableMajors);

        btnEditMajor.setText("Edit");
        btnEditMajor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditMajorActionPerformed(evt);
            }
        });

        btnExt.setText("Exit");
        btnExt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtActionPerformed(evt);
            }
        });

        btnDel.setText("Delete");
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        textMajorID.setEditable(false);
        textMajorID.setText("ID Major");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddMajor)
                        .addGap(18, 18, 18)
                        .addComponent(btnEditMajor)
                        .addGap(18, 18, 18)
                        .addComponent(btnDel))
                    .addComponent(textAddMajor)
                    .addComponent(btnExt)
                    .addComponent(textMajorID))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(textMajorID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(textAddMajor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddMajor)
                            .addComponent(btnEditMajor)
                            .addComponent(btnDel))
                        .addGap(18, 18, 18)
                        .addComponent(btnExt)))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditMajorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditMajorActionPerformed
        // TODO add your handling code here:
        try {
            connect();
            int row = tableMajors.getSelectedRow();
            if (row != -1) {
                String oldMajor = tableMajors.getModel().getValueAt(row, 1).toString();
                String newMajor = textAddMajor.getText();
                String sql = "UPDATE majors SET major = ? WHERE major = ?";
                PreparedStatement pstmt = conn.prepareStatement(sql);
                pstmt.setString(1, newMajor);
                pstmt.setString(2, oldMajor);
                int rowsUpdated = pstmt.executeUpdate();
                if (rowsUpdated > 0) {
                    display();
                    clear();
                    JOptionPane.showMessageDialog(null, "Edit Success");
                } else {
                    JOptionPane.showMessageDialog(null, "No matching major found to update.");
                }
                pstmt.close();
            } else {
                JOptionPane.showMessageDialog(null, "Please select a major to edit.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnEditMajorActionPerformed

    private void btnExtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExtActionPerformed
    // TODO add your handling code here:
    close();
    FormFinal ff = new FormFinal();
    ff.setVisible(true);
    }//GEN-LAST:event_btnExtActionPerformed

    private void btnAddMajorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMajorActionPerformed
            // TODO add your handling code here:
        try {
            connect();
            String major = textAddMajor.getText().trim();
            if (major.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Major input cannot be empty.");
                return;
            }
            String checkSql = "SELECT COUNT(*) FROM majors WHERE major = ?";
            try (PreparedStatement checkStmt = conn.prepareStatement(checkSql)) {
                checkStmt.setString(1, major);
                ResultSet rs = checkStmt.executeQuery();
                if (rs.next() && rs.getInt(1) > 0) {
                    JOptionPane.showMessageDialog(null, "Major already exists in the database.");
                } else {
                    String insertSql = "INSERT INTO majors (major) VALUES (?)";
                    try (PreparedStatement insertStmt = conn.prepareStatement(insertSql)) {
                        insertStmt.setString(1, major);
                        insertStmt.executeUpdate();
                        display();
                        clear();
                        JOptionPane.showMessageDialog(null, "Save Success");
                    }
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnAddMajorActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        // TODO add your handling code here:
        try {
            connect();
            int row = tableMajors.getSelectedRow();
            if (row != -1) {
                String id = tableMajors.getModel().getValueAt(row, 0).toString();
                String sql = "DELETE FROM majors WHERE id = ?";
                try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                    pstmt.setString(1, id);
                    pstmt.executeUpdate();
                    display();
                    clear();
                    JOptionPane.showMessageDialog(null, "Delete Success");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select a major to delete.");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "SQL Error: " + e.getMessage());
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnDelActionPerformed

    private void tableMajorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMajorsMouseClicked
        // TODO add your handling code here:
        try {
            connect();
            int row = tableMajors.getSelectedRow();
            String clickedRow = tableMajors.getModel().getValueAt(row, 0).toString();
            Statement stm = conn.createStatement();
            String sql = "SELECT id, major FROM majors WHERE id = '" + clickedRow + "'";
            ResultSet result = stm.executeQuery(sql);
            if (result.next()) {
                String id = result.getString("id");
                textMajorID.setText(id);
                String major = result.getString("major");
                textAddMajor.setText(major);
            }
        } catch (Exception e) {}
    }//GEN-LAST:event_tableMajorsMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddMajor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddMajor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddMajor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddMajor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddMajor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddMajor;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnEditMajor;
    private javax.swing.JButton btnExt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableMajors;
    private javax.swing.JTextField textAddMajor;
    private javax.swing.JTextField textMajorID;
    // End of variables declaration//GEN-END:variables
}
